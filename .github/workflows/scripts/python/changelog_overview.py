import yaml
import logging
from pathlib import Path

MAX_LINE_LENGTH = 150

HEADER_SEPARATOR = "--" * (MAX_LINE_LENGTH // len("--"))
HEADER_LINE_CENTER = MAX_LINE_LENGTH - 2 * len("--")
SCRIPT_NAME = Path(__file__).name

OVERVIEW_HEADER = f"""{HEADER_SEPARATOR}
--{f'This file was autogenerated using {SCRIPT_NAME}':^{HEADER_LINE_CENTER}}--
{HEADER_SEPARATOR}
"""

# Configure logging
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')


def extract_yaml_front_matter(content: str) -> (str, str):
    """Extracts YAML front matter from markdown content."""
    if content.startswith('---'):
        end = content.find('---', 3)
        if end != -1:
            yaml_content = content[3:end].strip()
            rest_of_content = content[end+3:].strip()
            return yaml_content, rest_of_content
    return '', content


def create_overview_file(input_dir: Path, output_file: Path):
    """Creates an overview Lua file listing all changelogs with metadata."""
    overview_entries = []

    logging.info(f"Scanning directory: {input_dir}")
    for markdown_file in input_dir.glob("*.md"):
        logging.info(f"Processing file: {markdown_file.name}")

        file_name_parts = markdown_file.stem.split('-')
        if len(file_name_parts) != 4:
            logging.warning(f"Skipping file with unexpected name format: {markdown_file.name}")
            continue

        date = '-'.join(file_name_parts[:3])
        version = file_name_parts[3]

        try:
            yaml_content, _ = extract_yaml_front_matter(markdown_file.read_text())
            yaml_data = yaml.safe_load(yaml_content) if yaml_content else {}

            name = yaml_data.get('title', 'Unknown')
            patch = yaml_data.get('patch', 'Unknown')

            logging.info(f"Extracted metadata - Version: {version}, Title: {name}, Date: {date}")

            entry = {
                'Version': version,
                'Name': name,
                'Patch': patch,
                'Date': date,
                'URL': f"http://faforever.github.io/fa/changelog/{version}",
                'Path': f"/lua/ui/lobby/changelog/generated/{markdown_file.stem}.lua"
            }
            overview_entries.append(entry)

        except Exception as e:
            logging.error(f"Failed to process {markdown_file.name}: {e}")

    if not overview_entries:
        logging.warning("No valid changelog entries found.")
        return

    # Sort the entries by version in reverse order
    overview_entries.sort(key=lambda entry: entry['Version'], reverse=True)

    logging.info("Generating overview Lua content...")
    overview_content = OVERVIEW_HEADER + """
---@type UIChangelogOverview
Overview = {
    Changelogs = {
"""
    for entry in overview_entries:
        overview_content += "        {\n"
        overview_content += f"            Version = {entry['Version']},\n"
        overview_content += f"            Name = \"{entry['Name']}\",\n"
        overview_content += f"            Date = \"{entry['Date']}\",\n"
