import yaml
import logging
from datetime import date, datetime
from pathlib import Path
from typing import Optional, Tuple

MAX_LINE_LENGTH = 150

HEADER_SEPARATOR = "--" * (MAX_LINE_LENGTH // len("--"))
HEADER_LINE_CENTER = MAX_LINE_LENGTH - 2 * len("--")
SCRIPT_NAME = Path(__file__).name

OVERVIEW_HEADER = f"""{HEADER_SEPARATOR}
--{f'This file was autogenerated using {SCRIPT_NAME}':^{HEADER_LINE_CENTER}}--
{HEADER_SEPARATOR}
"""

# Configure logging
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')


def extract_yaml_front_matter(content: str) -> (str, str):
    """Extracts YAML front matter from markdown content."""
    if content.startswith('---'):
        end = content.find('---', 3)
        if end != -1:
            yaml_content = content[3:end].strip()
            rest_of_content = content[end+3:].strip()
            return yaml_content, rest_of_content
    return '', content

def process_markdown_file(markdown_file: Path) -> Optional[Tuple[str, date]]:
    logging.info(f"Processing file: {markdown_file.name}")

    file_name_parts = markdown_file.stem.split('-')
    if len(file_name_parts) == 4:
        date_str = '-'.join(file_name_parts[:3])
        version = file_name_parts[3]
        try:
            parsed_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            logging.warning(f"Invalid date format in filename: {date_str}, using today's date.")
            parsed_date = date.today()
    else:
        logging.warning(f"Unexpected filename format: {markdown_file.name}")
        parsed_date = date.today()
        date_str = parsed_date.isoformat()
        version = markdown_file.stem

    try:
        yaml_content, _ = extract_yaml_front_matter(markdown_file.read_text())
        yaml_data = yaml.safe_load(yaml_content) if yaml_content else {}

        name = yaml_data.get('title', 'Unknown')
        patch = yaml_data.get('patch', 'Unknown')

        logging.info(f"Metadata - Version: {version}, Title: {name}, Date: {date_str}")

        entry = f"""        {{
            Version = {version},
            Name = "{name}",
            Date = "{date_str}",
            URL = "http://faforever.github.io/fa/changelog/{version}",
            Path = "/lua/ui/lobby/changelog/generated/{markdown_file.stem}.lua"
        }},"""
        return entry, parsed_date

    except Exception as e:
        logging.error(f"Failed to process {markdown_file.name}: {e}")
        return None

def create_overview_file(input_dir: Path, output_file: Path):
    """Creates an overview Lua file listing all changelogs with metadata."""
    entries: list[Tuple[str, date]] = []

    logging.info(f"Scanning directory: {input_dir}")
    for markdown_file in input_dir.glob("*.md"):
        result = process_markdown_file(markdown_file)
        if result:
            entries.append(result)

    if not entries:
        logging.warning("No valid changelog entries found.")
        return

    entries.sort(key=lambda pair: pair[1], reverse=True)

    logging.info("Generating overview Lua content...")
    overview_content = OVERVIEW_HEADER + """
---@type UIChangelogOverview
Overview = {
    Changelogs = {
"""
    overview_content += "\n".join(entry for entry, _ in entries)
    overview_content += "\n    }\n}\n"

    output_file.write_text(overview_content)
    logging.info(f"Overview Lua file written to: {output_file}")


def main():
    import argparse

    parser = argparse.ArgumentParser(description="Generate an overview Lua file for changelogs.")
    parser.add_argument("input_dir", type=Path, help="Directory containing markdown files")
    parser.add_argument("output_file", type=Path, help="Output Lua file path")
    args = parser.parse_args()

    create_overview_file(args.input_dir, args.output_file)


if __name__ == "__main__":
    main()
