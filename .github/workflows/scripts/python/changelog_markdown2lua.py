"""
This script converts markdown changelog files into Lua files.

The script processes a directory of markdown files, extracting YAML front matter and converting
each markdown file into a corresponding Lua file.
"""

import mdformat
import yaml

from argparse import ArgumentParser
from pathlib import Path

SCRIPT_NAME = Path(__file__).name

MAX_LINE_LENGTH = 150

LUA_DESC_LINE = '        "{line}"'
LUA_FILE = """Changelog = {{
    version = {version},
    description = {{
{description}
    }}
}}
"""

HEADER_SEPARATOR = "--" * (MAX_LINE_LENGTH // len("--"))
HEADER_LINE_CENTER = MAX_LINE_LENGTH - 2 * len("--")
HEADER = f"""{HEADER_SEPARATOR}
--{f"This file was autogenerated using {SCRIPT_NAME:}":^{HEADER_LINE_CENTER}}--
--{{source:^{HEADER_LINE_CENTER}}}--
{HEADER_SEPARATOR}
"""


def get_parser():
    """Sets up the argument parser for command line execution."""
    ap = ArgumentParser(description="Converts Markdown release files in a folder to Lua files.")
    ap.add_argument(
        "input_dir",
        help="Directory containing markdown files",
        type=Path,
    )
    ap.add_argument(
        "output_dir",
        help="Directory to save converted Lua files",
        type=Path,
    )
    return ap


def convert_changelog(markdown: Path, lua: Path):
    """Converts a single markdown file to a Lua file."""
    version = markdown.stem

    source_info = f"Source: {markdown}"
    header = HEADER.format(source=source_info)
    lua_content = markdown2lua(version, markdown.read_text())
    lua.write_text(header + lua_content)


def markdown2lua(version: str, content: str) -> str:
    """Converts markdown content to Lua format, excluding YAML front matter."""
    yaml_content, markdown_content = extract_yaml_front_matter(content)
    formatted_md = mdformat.text(
        markdown_content,
        options={
            "wrap": MAX_LINE_LENGTH,
        },
    )

    escaped_md = escape_special_symbols(formatted_md)
    lua_description = ",\n".join(
        LUA_DESC_LINE.format(line=line) for line in escaped_md.splitlines()
    )

    # YAML content is read and available here, but not added to the output yet.
    # yaml_data = yaml.safe_load(yaml_content) if yaml_content else None

    return LUA_FILE.format(
        version=version,
        description=lua_description,
    )


def extract_yaml_front_matter(content: str) -> (str, str):
    """Extracts YAML front matter from markdown content."""
    if content.startswith('---'):
        end = content.find('---', 3)
        if end != -1:
            yaml_content = content[3:end].strip()
            rest_of_content = content[end+3:].strip()
            return yaml_content, rest_of_content
    return '', content


def escape_special_symbols(text: str) -> str:
    """Escapes special symbols in text for Lua compatibility."""
    return text.replace("\\", "\\\\").replace('"', '\\"')


def convert_changelog_folder(input_dir: Path, output_dir: Path):
    """Converts all markdown files in a directory to Lua files."""
    for markdown_file in input_dir.glob("*.md"):
        lua_file = output_dir / (markdown_file.stem + ".lua")
        convert_changelog(markdown_file, lua_file)


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()
    convert_changelog_folder(args.input_dir, args.output_dir)
