{
    "End": {
        "body": [
            "${1:window}:End()"
        ],
        "prefix": [
            "End"
        ],
        "description": "Finalizes the window for rendering."
    },
    "Unindent": {
        "body": [
            "${1:window}:Unindent()"
        ],
        "prefix": [
            "Unindent"
        ],
        "description": "Unindents all elements added after this element."
    },
    "BeginTabBar": {
        "body": [
            "${1:window}:BeginTabBar(${2:identifier}, ${3:tabIdentifiers})"
        ],
        "prefix": [
            "BeginTabBar"
        ],
        "description": "Adds a tab bar.\r\n@param identifier The identifier of this element.\r\n@param tabs The identifiers of the tabs of the tab bar."
    },
    "Divider": {
        "body": [
            "${1:window}:Divider()"
        ],
        "prefix": [
            "Divider"
        ],
        "description": "Adds a horizontal divider."
    },
    "TextWithLabel": {
        "body": [
            "${1:window}:TextWithLabel(${2:label}, ${3:value}, ${4:perc})"
        ],
        "prefix": [
            "TextWithLabel"
        ],
        "description": "Adds two text entries, as if they are two columns.\r\n@param left The left text value.\r\n@param right The right text value.\r\n@param size The size of the text.\r\n@param perc The percentage (in width) when the right column starts"
    },
    "AllocateBitmap": {
        "body": [
            "${1:window}:AllocateBitmap(${2:color})"
        ],
        "prefix": [
            "AllocateBitmap"
        ],
        "description": "Allocates a generic bitmap.\r\n@param color The color of the bitmap."
    },
    "BeginCollapsingHeader": {
        "body": [
            "${1:window}:BeginCollapsingHeader(${2:identifier})"
        ],
        "prefix": [
            "BeginCollapsingHeader"
        ],
        "description": "Adds a collapsable header. Returns a boolean indicating whether the header is open.\r\n@param identifier The identifier of this element.\r\n@param label The name of this element displayed in the UI."
    },
    "RenderTarget": {
        "body": [
            "${1:window}:RenderTarget(${2:identifier}, ${3:width}, ${4:height}, ${5:settings})"
        ],
        "prefix": [
            "RenderTarget"
        ],
        "description": "Adds an additional render target similar to the minimap. Sadly - it bugs out for now as the depth buffer of the GPU is not reset.\r\n@param identifier The identifier of this element.\r\n@param width The width of the render target.\r\n@param height The height of the render target.\r\n@param settings The camera settings to use for the render target."
    },
    "InputText": {
        "body": [
            "${1:window}:InputText(${2:identifier}, ${3:label}, ${4:callback})"
        ],
        "prefix": [
            "InputText"
        ],
        "description": "Adds a text input field.\r\n@param identifier The identifier of this element.\r\n@param label The name of this element displayed in the UI.\r\n@param callback Called when the value is changed."
    },
    "IsHidden": {
        "body": [
            "${1:window}:IsHidden()"
        ],
        "prefix": [
            "IsHidden"
        ],
        "description": ""
    },
    "BeginTab": {
        "body": [
            "${1:window}:BeginTab(${2:identifier})"
        ],
        "prefix": [
            "BeginTab"
        ],
        "description": "Adds a tab bar.\r\n@param identifier The identifier of this element. This should match with a tab used in mWindow:BeginTabBar."
    },
    "AllocateText": {
        "body": [
            "${1:window}:AllocateText()"
        ],
        "prefix": [
            "AllocateText"
        ],
        "description": "Retrieves a text element. Returns a cached element if possible, allocates a\r\nnew one if no cached element is available."
    },
    "Hide": {
        "body": [
            "${1:window}:Hide()"
        ],
        "prefix": [
            "Hide"
        ],
        "description": ""
    },
    "Histogram": {
        "body": [
            "${1:window}:Histogram(${2:identifier}, ${3:width}, ${4:height})"
        ],
        "prefix": [
            "Histogram"
        ],
        "description": "Constructs a histogram using the Moho API. Sadly - this doesn't produce any results.\r\n@param identifier The identifier of this element.\r\n@param width The width of this element.\r\n@param height The height of this element."
    },
    "RatioChart": {
        "body": [
            "${1:window}:RatioChart(${2:data})"
        ],
        "prefix": [
            "RatioChart"
        ],
        "description": "Adds in a ratio chart that will fill the entire width.\r\n@param data The data for the ratio chart. Format is { { value = double, color = string }, ... }."
    },
    "SliderFloat": {
        "body": [
            "${1:window}:SliderFloat(${2:identifier}, ${3:min}, ${4:max}, ${5:value})"
        ],
        "prefix": [
            "SliderFloat"
        ],
        "description": "Adds a slider for changing a float value.\r\n@param identifier The identifier of this element.\r\n@param label The name of this element displayed in the UI.\r\n@param min The minimum value of the slider.\r\n@param max The maximum value of the slider.\r\n@param value The value of the slider.\r\n@param callback Called when the value is changed."
    },
    "Destroy": {
        "body": [
            "${1:window}:Destroy()"
        ],
        "prefix": [
            "Destroy"
        ],
        "description": "Completely destroy the window."
    },
    "Begin": {
        "body": [
            "${1:window}:Begin()"
        ],
        "prefix": [
            "Begin"
        ],
        "description": "Initialises the window for rendering."
    },
    "Space": {
        "body": [
            "${1:window}:Space(${2:size})"
        ],
        "prefix": [
            "Space"
        ],
        "description": "Adds a bit of vertical space.\r\n@param size Amount of space to allocate. Optional, defaults to 12."
    },
    "UpdateOffset": {
        "body": [
            "${1:window}:UpdateOffset(${2:size})"
        ],
        "prefix": [
            "UpdateOffset"
        ],
        "description": ""
    },
    "AllocateDivider": {
        "body": [
            "${1:window}:AllocateDivider()"
        ],
        "prefix": [
            "AllocateDivider"
        ],
        "description": "Retrieves a divider element. Returns a cached element if possible, allocates a\r\nnew one if no cached element is available."
    },
    "Indent": {
        "body": [
            "${1:window}:Indent()"
        ],
        "prefix": [
            "Indent"
        ],
        "description": "Indents all elements added after this element."
    },
    "EndTabBar": {
        "body": [
            "${1:window}:EndTabBar(${2:identifier})"
        ],
        "prefix": [
            "EndTabBar"
        ],
        "description": "Ends a tab bar.\r\n@param identifier The identifier of this element. This should match with the identifier used in mWindow:BeginTabBar."
    },
    "EndCollapsingHeader": {
        "body": [
            "${1:window}:EndCollapsingHeader(${2:identifier})"
        ],
        "prefix": [
            "EndCollapsingHeader"
        ],
        "description": ""
    },
    "Show": {
        "body": [
            "${1:window}:Show()"
        ],
        "prefix": [
            "Show"
        ],
        "description": ""
    },
    "Text": {
        "body": [
            "${1:window}:Text(${2:value})"
        ],
        "prefix": [
            "Text"
        ],
        "description": "Adds a text entry.\r\n@param identifier The identifier of this element.\r\n@param value The text of this element."
    },
    "SetTextColor": {
        "body": [
            "${1:window}:SetTextColor(${2:color})"
        ],
        "prefix": [
            "SetTextColor"
        ],
        "description": ""
    }
}